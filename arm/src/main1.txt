#include <ESP32Servo.h>
#include <WiFi.h>
#include <WebServer.h>

// Wi-Fi credentials
const char* ssid = "raspit";
const char* password = "raspit1ras";


WebServer server(80); 

int val, mapped_val;    // variable to read the value from the analog pin
String logMsg; 

Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;
Servo servo6;

static const int servo_1_pin = 4;
static const int servo_2_pin = 18;
static const int servo_3_pin = 19;
static const int servo_4_pin = 21;
static const int servo_5_pin = 22;
static const int servo_6_pin = 23;

int servoCount = 6;

Servo servos[] = {servo1, servo2, servo3, servo4, servo5, servo6};
int servo_pins[] = {servo_1_pin, servo_2_pin, servo_3_pin, servo_4_pin, servo_5_pin, servo_6_pin};

void setup() {
  Serial.begin(115200);
  
  // initialize
  for (int i = 0; i < servoCount; i++) {
    servos[i].attach(servo_pins[i]);
    servos[i].write(90);
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to Wi-Fi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println(".");
  }
  Serial.println("Connected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Handle servo control
  server.on("/setServo", []() {
    String value = server.arg("value");
    int servo_no = server.arg("id").toInt();
    int angle = value.toInt();
    
    if (angle >= -45 && angle <= 225) {
      mapped_val = map(angle, -45, 225, 0, 180);     // scale it for use with the servo library (value between 0 and 180)

      servos[servo_no-1].write(mapped_val);  // Set servo position
      Serial.println("Servo angle set to: " + String(angle));
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(200, "text/plain", "OK");
    } else {
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(400, "text/plain", "Invalid Angle");
    }
  });

  server.begin();  // Start the server
  Serial.println("Server started");
}

void loop() {
  server.handleClient();  // Handle client requests
}
